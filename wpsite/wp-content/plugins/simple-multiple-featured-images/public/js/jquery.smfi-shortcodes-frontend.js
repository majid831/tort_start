/**
 * Initializes the featured images of the SMFI plugin in the front end.
 *
 * @author Roman Bauer.
 * @since  1.0.2
 */
jQuery( 'document' ).ready( function( jQuery ){

	// Get all image container which were generated by the SMFI plugin.
	var defaultGalleries = jQuery( '.smfi-default-gallery-container' ),
		defaultSliders = jQuery( '.smfi-default-slider-container' );

	// Initialize all default galleries if any were found.
	if( defaultGalleries.length > 0 ) {
		de.smfi.shortcodes.SmfiShortcodeManager.initDefaultGalleries( defaultGalleries );
	}

	// Initialize all default slider if any were found.
	if( defaultSliders.length > 0 ) {
		de.smfi.shortcodes.SmfiShortcodeManager.initDefaultSliders( defaultSliders );
	}
} );

/**
 * Polyfill for Number.isInteger() of ECMAScript6.
 *
 * @author Roman Bauer.
 * @since  1.0.2
 */
Number.isInteger = Number.isInteger || function(value) {
  return typeof value === 'number' &&
    isFinite(value) &&
    Math.floor(value) === value;
};

var de = de || {
	smfi : {
		shortcodes : {

			/**
			 * Initializes HTML created by SMFI shortcodes properly.
			 *
			 * @since  1.0.2
			 * @access private
			 *
			 * @type     {Object}
			 */
			SmfiShortcodeManager : {
				/**
				 * The name of the attribute which holds the dot color.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @type     {Object}
				 */
				slideshowDotColorAttrName : 'slideshow-dot-color',

				/**
				 * The name of the attribute which holds the color of an active dot.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @type     {Object}
				 */
				slideshowActiveDotColorAttrName : 'slideshow-active-dot-color',

				/**
				 * The name of the attribute which holds the arrow color.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @type     {Object}
				 */
				slideshowArrowColorAttrName : 'slideshow-arrow-color',

				/**
				 * The name of the attribute which holds the color of an active arrow.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @type     {Object}
				 */
				slideshowActiveArrowColorAttrName : 'slideshow-active-arrow-color',

				/**
				 * The CSS class of an active slideshow dot.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @type     {Object}
				 */
				slideshowActiveDotCssClass : 'smfi-default-slider-dot-active',

				/**
				 * Initializes the galleries which were created by the default gallery shortcode of the SMFI plugin.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} defaultGalleries  The default galleries.
				 */
				initDefaultGalleries : function( defaultGalleries ) {
					// Process default galleries if necessary (in further versions necessary).
				},

				/**
				 * Initializes the slider which were created by the default slider shortcode of the SMFI plugin.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} defaultSliders  The default sliders.
				 */
				initDefaultSliders : function( defaultSliders ) {

					var shortcodesManager = this;

					// Initialize each slider separate.
					defaultSliders.each( function( index, element ) {

						var slider = jQuery( element );
						if( slider.length ) {

							// Get the slides.
							var slides = slider.find( '.smfi-default-slider-slide' );

							// Get the dots and set their color.
							var dots = slider.find( '.smfi-default-slider-dot' );
							shortcodesManager.initializeDotColor( slider, dots );
							shortcodesManager.initializeActiveDotColor( slider, dots );

							// Get the arrows and set their color.
							var arrows = slider.find( '.smfi-default-slider-prev, .smfi-default-slider-next' );
							shortcodesManager.initializeArrowColor( slider, arrows );
							shortcodesManager.initializeActiveArrowColor( slider, arrows );

							// Get the slideshow speed from the corresponding HTML data attribute.
							var slideshowSpeed = slider.data( 'slideshow-speed' );
							if( ! Number.isInteger ( slideshowSpeed ) ) {
								// 8000 milliseconds as default slider speed.
								slideshowSpeed = 8000;
							}

							// Show initially the first slide of the slider.
							shortcodesManager.showSlide( slider, slides, dots, 0 );

							/*
							* Create a timer which switch to the next slide after a specified amount of milliseconds.
							*/
							var nextSlideTimerID = setInterval( function() {
								shortcodesManager.activateNextSlide( slider, slides, dots );
							}, slideshowSpeed );

							// Show previous slide if prev button was clicked.
							slider.find( '.smfi-default-slider-prev' ).on( 'click', function( event ) {
								clearTimeout( nextSlideTimerID );
								shortcodesManager.activatePreviousSlide( slider, slides, dots );
								nextSlideTimerID = setInterval( function() {
									shortcodesManager.activateNextSlide( slider, slides, dots );
								}, slideshowSpeed );
							});

							// Show next slide if next button was clicked.
							slider.find( '.smfi-default-slider-next' ).on( 'click', function( event ) {
								clearTimeout( nextSlideTimerID );
								shortcodesManager.activateNextSlide( slider, slides, dots );
								nextSlideTimerID = setInterval( function() {
									shortcodesManager.activateNextSlide( slider, slides, dots );
								}, slideshowSpeed );
							});

							slider.find( '.smfi-default-slider-dot' ).each( function( index, element ){

								// Add 'click' listener which opens the corresponding slide.
								jQuery( element ).on( 'click', function( event ) {
									clearTimeout( nextSlideTimerID );
									shortcodesManager.showSlide( slider, slides, dots, index );
									nextSlideTimerID = setInterval( function() {
									shortcodesManager.activateNextSlide( slider, slides, dots );
								}, slideshowSpeed );
								});

								// Add 'enter' listener which opens the corresponding slide.
								jQuery( element ).keyup( function( e ) {
									if ( event.key !== undefined && ( event.key === 'Enter' ) ) {
										clearTimeout( nextSlideTimerID );
										shortcodesManager.showSlide( slider, slides, dots, index );
										nextSlideTimerID = setInterval( function() {
											shortcodesManager.activateNextSlide( slider, slides, dots );
										}, slideshowSpeed );
									}
								});
							});
						}
					});
				},

				/**
				 * Initializes the dot color. If the user specified a custom color then it will be used.
				 * If no color was specified then a default color will be used.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 * @param {jQuery} dots  The dots.
				 */
				initializeDotColor : function( slider, dots ) {
					var color = this.getDotColor( slider );
					if( color != '' ) {
						dots.css( 'background-color', color );
					}
				},

				/**
				 * Initializes the active dot color. If the user specified a custom color then it will be used.
				 * If no color was specified then a default color will be used.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider The slider.
				 * @param {jQuery} dots The dots.
				 */
				initializeActiveDotColor : function( slider, dots ) {
					var activeDotColor = this.getActiveDotColor( slider );
					if( activeDotColor != '' ) {

						var shortcodesManager = this;

						// Change color on hover and reset it back if hover stops.
						dots.hover(
							function() {
								// On hover change the dot color.
								jQuery( this ).css( 'background-color', activeDotColor );
							} , function() {
								// If hover ends then reset the dot color but only if the dot has not the active class.
								if( ! shortcodesManager.isActiveDot( jQuery( this ) ) )  {
									jQuery( this ).css( 'background-color', shortcodesManager.getDotColor( slider ) );
								}
							}
						);

						// On dot focus change the dot color.
						dots.focusin( function() {
							jQuery( this ).css( 'background-color', activeDotColor );
						} );

						// If dot focus ends then reset the dot color but only if the dot has not the active class.
						dots.focusout( function() {
							if( ! shortcodesManager.isActiveDot( jQuery( this ) ) )  {
								jQuery( this ).css( 'background-color', shortcodesManager.getDotColor( slider ) );
							}
						} );
					}
				},

				/**
				 * Initializes the arrow color. If the user specified a custom color then it will be used.
				 * If no color was specified then a default color will be used.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 * @param {jQuery} arrows  The arrows.
				 */
				initializeArrowColor : function( slider, arrows ) {
					var color = this.getArrowColor( slider );
					if( color != '' ) {
						arrows.css( 'color', color );
					}
				},

				/**
				 * Initializes the active arrow color. If the user specified a custom color then it will be used.
				 * If no color was specified then a default color will be used.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider The slider.
				* @param {jQuery} arrows  The arrows.
				 */
				initializeActiveArrowColor : function( slider, arrows ) {
					var activeArrowColor = this.getActiveArrowColor( slider );
					if( activeArrowColor != '' ) {

						var shortcodesManager = this;

						// Change color on hover and reset it back if hover stops.
						arrows.hover(
							function() {
								// On hover change the arrow color.
								jQuery( this ).css( 'color', activeArrowColor );
							} , function() {
								// If hover ends then reset the arrow color.
								jQuery( this ).css( 'color', shortcodesManager.getArrowColor( slider ) );
							}
						);

						// On arrow focus change the arrow color.
						arrows.focusin( function() {
							jQuery( this ).css( 'color', activeArrowColor );
						} );

						// If arrow focus ends then reset the arrow color.
						arrows.focusout( function() {
							jQuery( this ).css( 'color', shortcodesManager.getArrowColor( slider ) );
						} );
					}
				},

				/**
				 * Returns the dot color.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 *
				 * @return {string} The color as HEX or #DCDCDC if no valid attribute was found.
				 */
				getDotColor : function( slider ) {
					color = slider.data( this.slideshowDotColorAttrName );
					if( this.isHexColor( color ) ) {
						return color;
					}
					return '#DCDCDC';
				},

				/**
				 * Returns the active dot color.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 *
				 * @return {string} The color as HEX or #696969 if no valid attribute was found.
				 */
				getActiveDotColor : function( slider ) {
					var color = slider.data( this.slideshowActiveDotColorAttrName );
					if( this.isHexColor( color ) ) {
						return color;
					}
					return '#696969';
				},

				/**
				 * Returns the arrow color.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 *
				 * @return {string} The color as HEX or #DCDCDC if no valid attribute was found.
				 */
				getArrowColor : function( slider ) {
					color = slider.data( this.slideshowArrowColorAttrName );
					if( this.isHexColor( color ) ) {
						return color;
					}
					return '#DCDCDC';
				},

				/**
				 * Returns the active arrow color.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 *
				 * @return {string} The color as HEX or #696969 if no valid attribute was found.
				 */
				getActiveArrowColor : function( slider ) {
					var color = slider.data( this.slideshowActiveArrowColorAttrName );
					if( this.isHexColor( color ) ) {
						return color;
					}
					return '#696969';
				},

				/**
				 * Checks if the given color is represented by a valid HEX value.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 *
				 * @return {bool} True if the given color is valid HEX value else false.
				 */
				isHexColor : function( color ) {
					if( color == undefined || color === '' ) {
						return false;
					}
					var regex = RegExp( '^#([A-Fa-f0-9]{3}){1,2}$' );
					return regex.test( color );
				},

				/**
				 * Activates the next slide and make it visible.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 * @param {jQuery} slides  The slides.
				 * @param {jQuery} dots  The slide dots.
				 */
				activateNextSlide : function( slider, slides, dots ) {
					var activeSlideIndex = this.getActiveSlideIndex( slides );
					if( activeSlideIndex >= 0 && activeSlideIndex < slides.length ) {
						if( activeSlideIndex + 1 < slides.length ) {
							this.showSlide( slider, slides, dots, activeSlideIndex + 1 );
						} else {
							this.showSlide( slider, slides, dots, 0 );
						}
					}
				},

				/**
				 * Activates the previous slide and make it visible.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 * @param {jQuery} slides  The slides.
				 * @param {jQuery} dots  The slide dots.
				 */
				activatePreviousSlide : function( slider, slides, dots ) {
					var activeSlideIndex = this.getActiveSlideIndex( slides );
					if( activeSlideIndex >= 0 && activeSlideIndex <= slides.length ) {
						if( activeSlideIndex > 0 ) {
							this.showSlide( slider, slides, dots, activeSlideIndex - 1 );
						} else {
							this.showSlide( slider, slides, dots, slides.length - 1 );
						}
					}
				},

				/**
				 * Returns the index of the current active slide. Loops trough the slides and searches the active one.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slides  The slides.
				 *
				 * @return {int} The index or -1 if no slide was found.
				 */
				getActiveSlideIndex : function( slides ) {
					var activeSlideIndex = -1;
					slides.each( function( index, element ){
						if( jQuery( element ).css( 'display') === 'block' ) {
							activeSlideIndex = index;
							return false;
						}
					});
					return activeSlideIndex;
				},

				/**
				 * Checks if the given dot is the current active dot.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} dot  The dot.
				 *
				 * @return {bool} True if given dot is the current active dot else false.
				 */
				isActiveDot : function( dot ) {
					if( dot.length ) {
						return dot.hasClass( this.slideshowActiveDotCssClass );
					}
					return false;
				},

				/**
				 * Shows a slides by the given index.
				 *
				 * @since      1.0.2
				 * @access     private
				 *
				 * @param {jQuery} slider  The slider.
				 * @param {jQuery} slides  The slides.
				 * @param {jQuery} dots  The slide dots.
				 * @param {int} indexToShow  The index of the slide which should be showed.
				 */
				showSlide : function ( slider, slides, dots, indexToShow ) {

					// Reset all slides.
					slides.each( function( index, element ){
						jQuery( element ).css( 'display', 'none' );
					});

					// Reset all dots.
					var shortcodesManager = this;
					dots.each( function( index, element ){
						jQuery( element ).removeClass( shortcodesManager.slideshowActiveDotCssClass );
					});
					dots.css( 'background-color',  this.getDotColor( slider ) );

					// Show slide by using the given index.
					slides.eq( indexToShow ).css( 'display', 'block' );

					// Mark the corresponding dot as active and enable the active dot color.
					var dot = dots.eq( indexToShow );
					dot.addClass( this.slideshowActiveDotCssClass );
					dot.css( 'background-color', this.getActiveDotColor( slider ) );
				}
			}
		}
	}
};
